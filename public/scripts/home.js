/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var Alert = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.message}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

 // Begin AlertBox
var AlertBox = React.createClass({
  loadAlertsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleAlertSubmit: function(alert) {
    var alerts = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.

    // alert.id = Date.now();
    var newalerts = alerts.concat([alert]);
    this.setState({data: newalerts});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: alert,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: alerts});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {

    return {data: []};
  },
  componentDidMount: function() {
    this.loadAlertsFromServer();
    setInterval(this.loadAlertsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="alertBox">
        <h1>Alerts</h1>
        <AlertList data={this.state.data} />
        <AlertForm onAlertSubmit={this.handleAlertSubmit} />
      </div>
    );
  }
});
 // End AlertBox

// Begining AlertList
var AlertList = React.createClass({

  render: function() {
    var alertNodes = this.props.data.map(function(alert) {
      return (
        <Alert message={alert.message} key={alert.id}>
          {alert.recipients}
        </Alert>
      );
    });
    return (
      <div className="alertList">
        {alertNodes}
      </div>
    );
  }
});

// End AlertList

// Beginning AlertForm
var AlertForm = React.createClass({
  getInitialState: function() {
    return {message: '', recipients: ''};
  },
  handleMessageChange: function(e) {
    this.setState({message: e.target.value});
  },
  handleRecipientsChange: function(e) {
    this.setState({recipients: e.target.value});
  },
  handleSubmit: function(e) {

    e.preventDefault();
    var message = this.state.message.trim();
    var recipients = this.state.recipients.trim();
    if (!message || !recipients) {
      return;
    }
    this.props.onAlertSubmit({message: message, recipients: recipients});
    this.setState({message: '', recipients: ''});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Message"
          value={this.state.message}
          onChange={this.handleMessageChange}
        />
        <input
          type="text"
          placeholder="Recipients"
          value={this.state.recipients}
          onChange={this.handleRecipientsChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

// Ending AlertFrom

ReactDOM.render(
  <AlertBox url="api/alerts" pollInterval={2000} />,
  document.getElementById('content')
);
